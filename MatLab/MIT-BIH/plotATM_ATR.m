function plotATM_ATR(Name, start_seconds, end_seconds)

% usage: plotATM_ATR('RECORD')
%
% This function reads files (RECORDm.mat RECORDm.info RECORD.atr).
% The first 2 are generated by 'wfdb2mat' from a PhysioBank record.
% It baseline-corrects and scales the time series contained in the .mat file,
% and plots them. The R peaks from the 'atr' file are plotted on top.
% And average RR interval and heart rate (bpm) are also displayed.
%
% The baseline-corrected and scaled time series are the rows of matrix 'val',
% and each column contains simultaneous samples of each time series.
%
% The 'atr' files can be directly downloaded from PhysioNet, e.g.
% https://www.physionet.org/physiobank/database/mitdb/
% They do not require any conversion.
%
% 'wfdb2mat' is part of the open-source WFDB Software Package available at
%    http://physionet.org/physiotools/wfdb.shtml
% If you have installed a working copy of 'wfdb2mat', run a shell command
% such as
%    wfdb2mat -r 100s -f 0 -t 10 >100sm.info
% to create a pair of files ('100sm.mat', '100sm.info') that can be read
% by this function.
%
% The matlab format files needed by this function can also be produced by
% the PhysioBank ATM, at
%    http://physionet.org/cgi-bin/ATM
%

% plotATM_ATR.m is an enhanced version of plotATM.m
%    O. Abdala     16 Mar 2009
%    James Hislop  27 Jan 2014 version 1.1
%    Phil Davis    01 Apr 2018 add start and end time, refactor
%    Phil Davis    15 Apr 2018 read an "atr" file and plot the R peaks

plot_to_end = false;

if (nargin == 2)
    % with only two arguments passed, we plot from 0 to arg2
    end_seconds = start_seconds;
    start_seconds = 0;
end

if (nargin < 2)
    % with only one argument, we plot all the data
    start_seconds = 0;
    end_seconds = 0;
    plot_to_end = true;
end

% Do not start or end in the past
start_seconds = max(start_seconds, 0);
end_seconds = max(end_seconds, 0);

if (start_seconds > end_seconds)
    % be nice and swap around the start and end, rather than erroring
    temp_seconds = start_seconds;
    start_seconds = end_seconds;
    end_seconds = temp_seconds;
end

if ((end_seconds - start_seconds) < 0.1)
    % Always plot at least 0.1 second
    % we do not want "empty" plots
    end_seconds = start_seconds + 0.1;
end

mName = strcat(Name, 'm');
infoName = strcat(mName, '.info');
matName = strcat(mName, '.mat');
Octave = exist('OCTAVE_VERSION');
load(matName, 'val');
fid = fopen(infoName, 'rt');
fgetl(fid);
fgetl(fid);
fgetl(fid);
[freqint] = sscanf(fgetl(fid), 'Sampling frequency: %f Hz  Sampling interval: %f sec');
sample_freq = freqint(1);
interval = freqint(2);
fgetl(fid);

if(Octave)
    for i = 1:size(val, 1)
       R = strsplit(fgetl(fid), char(9));
       signal{i} = R{2};
       gain(i) = str2double(R{3});
       base(i) = str2double(R{4});
       units{i} = R{5};
    end
else
    rowData=textscan(fid,'%d %s %f %f %s');
    signal = rowData{2};
    gain = cell2mat(rowData(3));
    base = cell2mat(rowData(4));
    units = rowData{5};
end

fclose(fid);
val(val==-32768) = NaN;

num_samples = size(val,2);

start_sample = int64(min((start_seconds*sample_freq) + 1, num_samples));

if (plot_to_end)
    end_sample = num_samples;
else
    end_sample = int64(min(max(end_seconds*sample_freq,1), num_samples));
end

% Get the annotation data from the atr file. 
% This has the beats (R peaks) detected and their type N(ormal) or A(rrhtymia)
% At present we are only loading the R peak data
% The annotation file name has no 'm' at the end
[ann] = rdann(Name,'atr');

% Maybe true or not? Because the annotation sample numbers and the actual
% exact peaks sometimes match but are sometimes 1 sample off.
% The annotation sample numbers are zero-based?
% Increment them because the MatLab val array is 1-based?
%ann = ann + 1;

% Init variables
ann_secs = [];
ann_values = [];
peak_count = 0;
peak_before_count = 0;
peak_after_count = 0;
peak_ok_count = 0;
peak_ok = true;
first_peak_sample = 0;
last_peak_sample = 0;

% Find the value of the peak at each annotation sample point.
% Use the values from signal 1 in the val array.
% Signal 1 is the signal from which the annotations were derived.
for k = 1 : length(ann)
    % Only use annotations that are between the desired start and end point
    if ((ann(k) >= start_sample) && (ann(k) <= end_sample))
        peak_count = peak_count + 1;
        ann_secs(peak_count) = ann(k) * interval;
        ann_values(peak_count) = (val(1,ann(k)) - base(1)) / gain(1);
        peak_ok = true;
        
        last_peak_sample = ann(k);
        
        if (peak_count == 1)
            first_peak_sample = last_peak_sample;
        end
        
        % If the value of the sample before or after is higher, 
        % then the annotation is not exactly on the peak.
        if (val(1,ann(k)) < val(1,ann(k)-1))
            peak_before_count = peak_before_count + 1;
            peak_ok = false;
        end
        
        if (val(1,ann(k)) < val(1,ann(k)+1))
            peak_ok = false;
            peak_after_count = peak_after_count + 1;
        end
        
        if (peak_ok)
            peak_ok_count = peak_ok_count + 1;
        end
    end
end

% Report information about the numbers of annotated peaks found,
% and how many seem to be not quite in the right place.
fprintf('%d annotated R peaks are in the displayed time period\n', peak_count);

if (peak_ok_count < peak_count)
    fprintf('Only %d peaks seem to be in the exactly correct place\n', peak_ok_count);
end

if (peak_before_count > 0)
    fprintf('The true peak is before %d annotated peaks\n', peak_before_count);
end
if (peak_after_count > 0)
    fprintf('The true peak is after %d annotated peaks\n', peak_after_count);
end

if (peak_count > 1)
    % We can calculate some inter-peak stats
    peak_interval_first_to_last = (last_peak_sample - first_peak_sample) * interval;
    average_rr_interval_sec = peak_interval_first_to_last / (peak_count - 1);
    average_heart_rate_bpm = 60 / average_rr_interval_sec;
    fprintf('Average    RR interval: %f\n', average_rr_interval_sec);
    fprintf('Average heart rate bpm: %f\n', average_heart_rate_bpm);
    stats_text = {sprintf('Ave RR %4.2f', average_rr_interval_sec), sprintf('Ave BPM %3.0f', average_heart_rate_bpm)};
else
    % with only 1 or no peaks, inter-peak stats are meaningless
    fprintf('Cannot calculate average RR interval or heart rate - too few peaks\n');
    stats_text = {'No ave RR', 'No BPM'};
end

val_to_plot = val(:,start_sample:end_sample);

for i = 1:size(val_to_plot, 1)
    val_to_plot(i, :) = (val_to_plot(i, :) - base(i)) / gain(i);
end

x = ((1:size(val_to_plot, 2)) * interval) + start_seconds;

figure;
% Plot the time-series data
plot(x', val_to_plot');
hold on;
% Overlay with the R peaks
plot(ann_secs', ann_values', 'ro', 'Markersize', 4);
hold off;
% Add a text box with the stats
dim = [0.7 0.5 0.3 0.3];
annotation('textbox', dim, 'String', stats_text, 'FitBoxToText', 'on');
% Add legends with signal lead and units details
for i = 1:length(signal)
    labels{i} = strcat(signal{i}, ' (', units{i}, ')'); 
end

legend(labels);
xlabel('Time (sec)');
% grid on

end
